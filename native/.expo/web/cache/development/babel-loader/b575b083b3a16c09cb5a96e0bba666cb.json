{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\wamp\\\\www\\\\Henry\\\\HenryBanks\\\\native\\\\screens\\\\Register.js\";\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { createUser } from \"../store/actions/userActions\";\n\nvar Register = function Register(_ref) {\n  var id = _ref.id,\n      _ref$userName = _ref.userName,\n      userName = _ref$userName === void 0 ? \"\" : _ref$userName,\n      _ref$email = _ref.email,\n      email = _ref$email === void 0 ? \"\" : _ref$email,\n      _ref$password = _ref.password,\n      password = _ref$password === void 0 ? \"\" : _ref$password,\n      _ref$passwordConfirma = _ref.passwordConfirmation,\n      passwordConfirmation = _ref$passwordConfirma === void 0 ? \"\" : _ref$passwordConfirma;\n  var dispatch = useDispatch();\n  return React.createElement(View, {\n    style: styles.loginContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      userName: userName,\n      email: email,\n      password: password,\n      passwordConfirmation: passwordConfirmation\n    },\n    validationSchema: Yup.object({\n      userName: Yup.string().min(4, \"Debe tener al menos 4 caracteres\").max(50, \"Debe tener 50 caracteres o menos\").required(\"Debes completar este campo\"),\n      email: Yup.string().email(\"Introduzca un email valido por favor\").required(\"Debes completar este campo\"),\n      password: Yup.string().required(\"Please Enter your password\").matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"),\n      passwordConfirmation: Yup.string().oneOf([Yup.ref(\"password\"), null], \"La contrase√±a no coincide\").required(\"Password confirm is required\")\n    }),\n    onSubmit: function _callee(values, _ref2) {\n      var setSubmitting, resetForm;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting = _ref2.setSubmitting, resetForm = _ref2.resetForm;\n              handleSave(values, function () {\n                dispatch(createUser(values));\n                resetForm(initialValues);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var handleChange = _ref3.handleChange,\n        handleSubmit = _ref3.handleSubmit,\n        setFieldValue = _ref3.setFieldValue,\n        values = _ref3.values,\n        handleBlur = _ref3.handleBlur,\n        handleReset = _ref3.handleReset,\n        errors = _ref3.errors;\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      name: \"userName\",\n      placeholder: \"userName\",\n      onChangeText: handleChange(\"userName\"),\n      onBlur: handleBlur(\"userName\"),\n      style: styles.textInput,\n      value: values.userName,\n      keyboardType: \"text\",\n      setFieldValue: setFieldValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }), errors.name && React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, errors.name), React.createElement(TextInput, {\n      name: \"email\",\n      placeholder: \"email\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      style: styles.textInput,\n      value: values.email,\n      keyboardType: \"email-address\",\n      setFieldValue: setFieldValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }), errors.email && React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, errors.email), React.createElement(TextInput, {\n      name: \"password\",\n      placeholder: \"Password\",\n      onChangeText: handleChange(\"password\"),\n      onBlur: handleBlur(\"password\"),\n      style: styles.textInput,\n      value: values.password,\n      secureTextEntry: true,\n      setFieldValue: setFieldValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }), errors.password && React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 15\n      }\n    }, errors.password), React.createElement(TextInput, {\n      name: \"passwordConfirmation\",\n      placeholder: \"Confirm password\",\n      onChangeText: handleChange(\"passwordConfirmation\"),\n      onBlur: handleBlur(\"passwordConfirmation\"),\n      style: styles.textInput,\n      value: values.passwordConfirmation,\n      secureTextEntry: true,\n      setFieldValue: setFieldValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }), errors.passwordConfirmation && React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 15\n      }\n    }, errors.passwordConfirmation), React.createElement(Button, {\n      secureTextEntry: true,\n      title: \"Register\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  loginContainer: {\n    width: \"100%\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: 10,\n    elevation: 10,\n    backgroundColor: \"#e6e6e6\"\n  },\n  textInput: {\n    height: 40,\n    width: \"100%\",\n    margin: 10,\n    backgroundColor: \"white\",\n    borderColor: \"gray\",\n    borderWidth: StyleSheet.hairlineWidth,\n    borderRadius: 10\n  }\n});\nexport default Register;","map":{"version":3,"sources":["C:/wamp/www/Henry/HenryBanks/native/screens/Register.js"],"names":["React","useState","Formik","Form","Field","Yup","useDispatch","createUser","Register","id","userName","email","password","passwordConfirmation","dispatch","styles","loginContainer","object","string","min","max","required","matches","oneOf","ref","values","setSubmitting","resetForm","handleSave","initialValues","handleChange","handleSubmit","setFieldValue","handleBlur","handleReset","errors","textInput","name","fontSize","color","StyleSheet","create","width","alignItems","backgroundColor","padding","elevation","height","margin","borderColor","borderWidth","hairlineWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  TextInput,\n  Button,\n  SafeAreaView,\n} from \"react-native\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport * as Yup from \"yup\";\n\nimport { useDispatch } from \"react-redux\";\n\nimport { createUser } from \"../store/actions/userActions\";\n\nconst Register = ({ id, userName = \"\", email = \"\", password = \"\",passwordConfirmation = \"\" }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <View style={styles.loginContainer}>\n      <Formik\n        initialValues={{\n          userName,\n          email,\n          password,\n          passwordConfirmation\n        }}\n        validationSchema={Yup.object({\n          userName: Yup.string()\n            .min(4, \"Debe tener al menos 4 caracteres\")\n            .max(50, \"Debe tener 50 caracteres o menos\")\n            .required(\"Debes completar este campo\"),\n          email: Yup.string()\n            .email(\"Introduzca un email valido por favor\")\n            .required(\"Debes completar este campo\"),\n          password: Yup.string()\n            .required(\"Please Enter your password\")\n            .matches(\n              /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n              \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n            ),\n          passwordConfirmation: Yup.string()\n            .oneOf([Yup.ref(\"password\"), null], \"La contrase√±a no coincide\")\n            .required(\"Password confirm is required\"),\n        })}\n        onSubmit={async (values, { setSubmitting, resetForm }) => {\n          handleSave(values, () => {\n            dispatch(createUser(values));\n            resetForm(initialValues);\n          })\n        }}\n      >\n        {({ handleChange,handleSubmit,setFieldValue, values, handleBlur, handleReset,errors }) => (\n          <View>\n            <TextInput\n              name=\"userName\"\n              placeholder=\"userName\"\n              onChangeText={handleChange(\"userName\")}\n              onBlur={handleBlur(\"userName\")}\n              style={styles.textInput}\n              value={values.userName}\n              keyboardType=\"text\"\n              setFieldValue={setFieldValue}\n            />\n            {errors.name && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>{errors.name}</Text>\n            )}\n            <TextInput\n              name=\"email\"\n              placeholder=\"email\"\n              onChangeText={handleChange(\"email\")}\n              onBlur={handleBlur(\"email\")}\n              style={styles.textInput}\n              value={values.email}\n              keyboardType=\"email-address\"\n              setFieldValue={setFieldValue}\n            />\n            {errors.email && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>{errors.email}</Text>\n            )}\n            <TextInput\n              name=\"password\"\n              placeholder=\"Password\"\n              onChangeText={handleChange(\"password\")}\n              onBlur={handleBlur(\"password\")}\n              style={styles.textInput}\n              value={values.password}\n              secureTextEntry={true}\n              setFieldValue={setFieldValue}\n            />\n            {errors.password && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>\n                {errors.password}\n              </Text>\n            )}\n            <TextInput\n              name=\"passwordConfirmation\"\n              placeholder=\"Confirm password\"\n              onChangeText={handleChange(\"passwordConfirmation\")}\n              onBlur={handleBlur(\"passwordConfirmation\")}\n              style={styles.textInput}\n              value={values.passwordConfirmation}\n              secureTextEntry={true}\n              setFieldValue={setFieldValue}\n            />\n            {errors.passwordConfirmation && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>\n                {errors.passwordConfirmation}\n              </Text>\n            )}\n            <Button\n              secureTextEntry={true}\n              title=\"Register\"\n              onPress={handleSubmit}\n\n            />\n          </View>\n        )}\n      </Formik>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  loginContainer: {\n    width: \"100%\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: 10,\n    elevation: 10,\n    backgroundColor: \"#e6e6e6\",\n  },\n  textInput: {\n    height: 40,\n    width: \"100%\",\n    margin: 10,\n    backgroundColor: \"white\",\n    borderColor: \"gray\",\n    borderWidth: StyleSheet.hairlineWidth,\n    borderRadius: 10,\n  },\n});\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}