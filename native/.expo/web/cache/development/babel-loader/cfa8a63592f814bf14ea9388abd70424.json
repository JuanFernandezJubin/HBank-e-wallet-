{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\wamp\\\\www\\\\Henry\\\\HenryBanks\\\\native\\\\screens\\\\Register.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { Formik, Form, Field } from \"formik\";\nimport { useDispatch } from \"react-redux\";\nimport { createUser } from \"../store/actions/userActions\";\n\nvar Register = function Register(_ref) {\n  var id = _ref.id,\n      email = _ref.email,\n      password = _ref.password;\n  var dispatch = useDispatch();\n  var history = useHistory();\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      email: email,\n      password: password\n    },\n    onSubmit: function _callee(values, _ref2) {\n      var setSubmitting, resetForm, imgBase64, user, data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting = _ref2.setSubmitting, resetForm = _ref2.resetForm;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(convertBase64(values.image));\n\n            case 3:\n              imgBase64 = _context.sent;\n              user = _objectSpread(_objectSpread({}, values), {}, {\n                image: imgBase64\n              });\n              data = action === \"delete\" ? null : user;\n              user.email = user.email.toLowerCase();\n              dispatch(postUser(user));\n              history.push(\"/user/login\");\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 10\n  },\n  scrollView: {\n    backgroundColor: \"white\",\n    marginHorizontal: 20\n  },\n  text: {\n    fontSize: 42\n  }\n});\n\nfunction mapStateToProps(state) {\n  return {\n    userP: state.users\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createUSerP: function createUSerP(user) {\n      return dispatch(createUser(user));\n    }\n  };\n}\n\nexport default Register;","map":{"version":3,"sources":["C:/wamp/www/Henry/HenryBanks/native/screens/Register.js"],"names":["React","useState","Formik","Form","Field","useDispatch","createUser","Register","id","email","password","dispatch","history","useHistory","values","setSubmitting","resetForm","convertBase64","image","imgBase64","user","data","action","toLowerCase","postUser","push","styles","StyleSheet","create","container","flex","marginTop","scrollView","backgroundColor","marginHorizontal","text","fontSize","mapStateToProps","state","userP","users","mapDispatchToProps","createUSerP"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;;AAUA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,QAApC;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,UAAT;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAA6B;AAAA,MAA1BC,EAA0B,QAA1BA,EAA0B;AAAA,MAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC5C,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,MAAMO,OAAO,GAAGC,UAAU,EAA1B;AAEA,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAE;AACbJ,MAAAA,KAAK,EAALA,KADa;AAEbC,MAAAA,QAAQ,EAARA;AAFa,KADjB;AAKE,IAAA,QAAQ,EAAE,iBAAOI,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiBC,cAAAA,aAAjB,SAAiBA,aAAjB,EAAgCC,SAAhC,SAAgCA,SAAhC;AAAA;AAAA,+CAEgBC,aAAa,CAACH,MAAM,CAACI,KAAR,CAF7B;;AAAA;AAEFC,cAAAA,SAFE;AAIJC,cAAAA,IAJI,mCAIQN,MAJR;AAIgBI,gBAAAA,KAAK,EAAEC;AAJvB;AAKFE,cAAAA,IALE,GAKKC,MAAM,KAAK,QAAX,GAAsB,IAAtB,GAA6BF,IALlC;AAORA,cAAAA,IAAI,CAACX,KAAL,GAAaW,IAAI,CAACX,KAAL,CAAWc,WAAX,EAAb;AAEAZ,cAAAA,QAAQ,CAACa,QAAQ,CAACJ,IAAD,CAAT,CAAR;AACAR,cAAAA,OAAO,CAACa,IAAR,CAAa,aAAb;;AAVQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAsBD,CA1BD;;AA4BA,IAAMC,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,SAAS,EAAE;AAFF,GADoB;AAK/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,eAAe,EAAE,OADP;AAEVC,IAAAA,gBAAgB,EAAE;AAFR,GALmB;AAS/BC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE;AADN;AATyB,CAAlB,CAAf;;AAcA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,KAAK,EAAED,KAAK,CAACE;AADR,GAAP;AAGD;;AAED,SAASC,kBAAT,CAA4B9B,QAA5B,EAAsC;AACpC,SAAO;AACL+B,IAAAA,WAAW,EAAE,qBAACtB,IAAD;AAAA,aAAUT,QAAQ,CAACL,UAAU,CAACc,IAAD,CAAX,CAAlB;AAAA;AADR,GAAP;AAGD;;AAED,eAAeb,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  TextInput,\n  Button,\n  SafeAreaView,\n} from \"react-native\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport { useDispatch } from \"react-redux\";\n\nimport { createUser } from \"../store/actions/userActions\";\nconst Register = ({ id, email, password }) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  return (\n    <View>\n      <Formik\n        initialValues={{\n          email,\n          password,\n        }}\n        onSubmit={async (values, { setSubmitting, resetForm }) => {\n          // Convertir imagen en base64\n          const imgBase64 = await convertBase64(values.image);\n          //Request al backend\n          let user = { ...values, image: imgBase64 };\n          const data = action === \"delete\" ? null : user;\n          //To lower case\n          user.email = user.email.toLowerCase();\n\n          dispatch(postUser(user));\n          history.push(\"/user/login\");\n        }}\n      ></Formik>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 10,\n  },\n  scrollView: {\n    backgroundColor: \"white\",\n    marginHorizontal: 20,\n  },\n  text: {\n    fontSize: 42,\n  },\n});\n\nfunction mapStateToProps(state) {\n  return {\n    userP: state.users,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    createUSerP: (user) => dispatch(createUser(user)),\n  };\n}\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}