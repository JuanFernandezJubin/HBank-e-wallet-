{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\wamp\\\\www\\\\Henry\\\\HenryBanks\\\\native\\\\screens\\\\Register.js\";\n\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useDispatch } from \"react-redux\";\nimport { createUser } from \"../store/actions/userActions\";\n\nvar Register = function Register(_ref) {\n  var id = _ref.id,\n      name = _ref.name,\n      email = _ref.email,\n      password = _ref.password,\n      passwordConfirmation = _ref.passwordConfirmation;\n  var dispatch = useDispatch();\n  return React.createElement(View, {\n    style: styles.loginContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, React.createElement(Formik, {\n    initialValues: {\n      name: name,\n      email: email,\n      password: password,\n      passwordConfirmation: passwordConfirmation\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().min(4, \"Debe tener al menos 4 caracteres\").max(50, \"Debe tener 50 caracteres o menos\").required(\"Debes completar este campo\"),\n      email: Yup.string().email(\"Introduzca un email valido por favor\").required(\"Debes completar este campo\"),\n      address: Yup.string().min(6, \"Debe tener al menos 4 caracteres\").max(50, \"Debe tener 50 caracteres o menos\").required(\"Debes completar este campo\"),\n      phoneNumber: Yup.string().required(\"Please Enter your Phone Number\").matches(/^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/, \"Phone number is not valid\"),\n      password: Yup.string().required(\"Please Enter your password\").matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"),\n      passwordConfirmation: Yup.string().oneOf([Yup.ref(\"password\"), null], \"La contrase√±a no coincide\").required(\"Password confirm is required\")\n    }),\n    onSubmit: function _callee(values, _ref2) {\n      var setSubmitting, resetForm;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setSubmitting = _ref2.setSubmitting, resetForm = _ref2.resetForm;\n              dispatch(createUser(values)).then(function (response) {\n                resetForm();\n                setSubmitting(false);\n              });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var handleChange = _ref3.handleChange,\n        handleSubmit = _ref3.handleSubmit,\n        values = _ref3.values,\n        handleBlur = _ref3.handleBlur,\n        errors = _ref3.errors;\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, React.createElement(TextInput, {\n      name: \"name\",\n      placeholder: \"name\",\n      onChangeText: handleChange(\"name\"),\n      onBlur: handleBlur(\"name\"),\n      style: styles.textInput,\n      value: values.name,\n      keyboardType: \"text\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), errors.name && React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, errors.name), React.createElement(TextInput, {\n      name: \"email\",\n      placeholder: \"email\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      style: styles.textInput,\n      value: values.email,\n      keyboardType: \"email-address\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }), errors.email && React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 15\n      }\n    }, errors.email), React.createElement(TextInput, {\n      name: \"password\",\n      placeholder: \"password\",\n      onChangeText: handleChange(\"password\"),\n      onBlur: handleBlur(\"password\"),\n      style: styles.textInput,\n      value: values.password,\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }), errors.password && React.createElement(Text, {\n      style: {\n        fontSize: 10,\n        color: \"red\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, errors.password), React.createElement(Button, {\n      secureTextEntry: true,\n      title: \"Register\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  loginContainer: {\n    width: \"100%\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: 10,\n    elevation: 10,\n    backgroundColor: \"#e6e6e6\"\n  },\n  textInput: {\n    height: 40,\n    width: \"100%\",\n    margin: 10,\n    backgroundColor: \"white\",\n    borderColor: \"gray\",\n    borderWidth: StyleSheet.hairlineWidth,\n    borderRadius: 10\n  }\n});\nexport default Register;","map":{"version":3,"sources":["C:/wamp/www/Henry/HenryBanks/native/screens/Register.js"],"names":["React","useState","Formik","Form","Field","Yup","useDispatch","createUser","Register","id","name","email","password","passwordConfirmation","dispatch","styles","loginContainer","object","string","min","max","required","address","phoneNumber","matches","oneOf","ref","values","setSubmitting","resetForm","then","response","handleChange","handleSubmit","handleBlur","errors","textInput","fontSize","color","StyleSheet","create","width","alignItems","backgroundColor","padding","elevation","height","margin","borderColor","borderWidth","hairlineWidth","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  TextInput,\n  Button,\n  SafeAreaView,\n} from \"react-native\";\nimport { Formik, Form, Field } from \"formik\";\n\nimport * as Yup from \"yup\";\n\nimport { useDispatch } from \"react-redux\";\n\nimport { createUser } from \"../store/actions/userActions\";\n\nconst Register = ({ id, name, email, password,passwordConfirmation }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <View style={styles.loginContainer}>\n      <Formik\n        initialValues={{\n          name,\n          email,\n          password,\n          passwordConfirmation\n        }}\n        validationSchema={Yup.object({\n          name: Yup.string()\n            .min(4, \"Debe tener al menos 4 caracteres\")\n            .max(50, \"Debe tener 50 caracteres o menos\")\n            .required(\"Debes completar este campo\"),\n          email: Yup.string()\n            .email(\"Introduzca un email valido por favor\")\n            .required(\"Debes completar este campo\"),\n          address: Yup.string()\n            .min(6, \"Debe tener al menos 4 caracteres\")\n            .max(50, \"Debe tener 50 caracteres o menos\")\n            .required(\"Debes completar este campo\"),\n          phoneNumber: Yup.string()\n            .required(\"Please Enter your Phone Number\")\n            .matches(\n              /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/,\n              \"Phone number is not valid\"\n            ),\n          password: Yup.string()\n            .required(\"Please Enter your password\")\n            .matches(\n              /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/,\n              \"Must Contain 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character\"\n            ),\n          passwordConfirmation: Yup.string()\n            .oneOf([Yup.ref(\"password\"), null], \"La contrase√±a no coincide\")\n            .required(\"Password confirm is required\"),\n        })}\n        onSubmit={async (values, { setSubmitting, resetForm }) => {\n          dispatch(createUser(values)).then((response) => {\n            resetForm();\n            setSubmitting(false);\n          });\n        }}\n      >\n        {({ handleChange, handleSubmit, values, handleBlur, errors }) => (\n          <View>\n            <TextInput\n              name=\"name\"\n              placeholder=\"name\"\n              onChangeText={handleChange(\"name\")}\n              onBlur={handleBlur(\"name\")}\n              style={styles.textInput}\n              value={values.name}\n              keyboardType=\"text\"\n            />\n            {errors.name && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>{errors.name}</Text>\n            )}\n            <TextInput\n              name=\"email\"\n              placeholder=\"email\"\n              onChangeText={handleChange(\"email\")}\n              onBlur={handleBlur(\"email\")}\n              style={styles.textInput}\n              value={values.email}\n              keyboardType=\"email-address\"\n            />\n            {errors.email && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>{errors.email}</Text>\n            )}\n            <TextInput\n              name=\"password\"\n              placeholder=\"password\"\n              onChangeText={handleChange(\"password\")}\n              onBlur={handleBlur(\"password\")}\n              style={styles.textInput}\n              value={values.password}\n              secureTextEntry={true}\n            />\n            {errors.password && (\n              <Text style={{ fontSize: 10, color: \"red\" }}>\n                {errors.password}\n              </Text>\n            )}\n            <Button\n              secureTextEntry={true}\n              title=\"Register\"\n\n              onPress={handleSubmit}\n            />\n          </View>\n        )}\n      </Formik>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  loginContainer: {\n    width: \"100%\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: 10,\n    elevation: 10,\n    backgroundColor: \"#e6e6e6\",\n  },\n  textInput: {\n    height: 40,\n    width: \"100%\",\n    margin: 10,\n    backgroundColor: \"white\",\n    borderColor: \"gray\",\n    borderWidth: StyleSheet.hairlineWidth,\n    borderRadius: 10,\n  },\n});\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}